2024-03-10 17:11:44,498 - root - INFO - Generator(
  (netG1): Encoder(
    (model): Sequential(
      (encoder): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    )
  )
  (netG2): Encoder(
    (model): Sequential(
      (encoder): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG3): Encoder(
    (model): Sequential(
      (encoder): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG4): Encoder(
    (model): Sequential(
      (encoder): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG5): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG6): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG7): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (netD1): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD2): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD3): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD4): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD5): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD6): Decoder(
    (model): Sequential(
      (decoder): Conv2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD7): Decoder(
    (model): Sequential(
      (decoder): Conv2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
)
2024-03-10 17:16:46,922 - root - INFO - Generator(
  (netG1): Encoder(
    (model): Sequential(
      (encoder): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    )
  )
  (netG2): Encoder(
    (model): Sequential(
      (encoder): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG3): Encoder(
    (model): Sequential(
      (encoder): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG4): Encoder(
    (model): Sequential(
      (encoder): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG5): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG6): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG7): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (netD1): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD2): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD3): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD4): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD5): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD6): Decoder(
    (model): Sequential(
      (decoder): Conv2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD7): Decoder(
    (model): Sequential(
      (decoder): Conv2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
)
2024-03-10 17:17:52,243 - root - INFO - Generator(
  (netG1): Encoder(
    (model): Sequential(
      (encoder): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    )
  )
  (netG2): Encoder(
    (model): Sequential(
      (encoder): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG3): Encoder(
    (model): Sequential(
      (encoder): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG4): Encoder(
    (model): Sequential(
      (encoder): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG5): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG6): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG7): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (netD1): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD2): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD3): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD4): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD5): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD6): Decoder(
    (model): Sequential(
      (decoder): Conv2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD7): Decoder(
    (model): Sequential(
      (decoder): Conv2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
)
2024-03-10 17:18:09,678 - root - INFO - Generator(
  (netG1): Encoder(
    (model): Sequential(
      (encoder): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    )
  )
  (netG2): Encoder(
    (model): Sequential(
      (encoder): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG3): Encoder(
    (model): Sequential(
      (encoder): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG4): Encoder(
    (model): Sequential(
      (encoder): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG5): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG6): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG7): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (netD1): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD2): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD3): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD4): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD5): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD6): Decoder(
    (model): Sequential(
      (decoder): Conv2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD7): Decoder(
    (model): Sequential(
      (decoder): Conv2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
)
2024-03-10 17:20:42,099 - root - INFO - Generator(
  (netG1): Encoder(
    (model): Sequential(
      (encoder): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    )
  )
  (netG2): Encoder(
    (model): Sequential(
      (encoder): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG3): Encoder(
    (model): Sequential(
      (encoder): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG4): Encoder(
    (model): Sequential(
      (encoder): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG5): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG6): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG7): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (netD1): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD2): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD3): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD4): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD5): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD6): Decoder(
    (model): Sequential(
      (decoder): Conv2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD7): Decoder(
    (model): Sequential(
      (decoder): Conv2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
)
2024-03-10 17:23:08,128 - root - INFO - Generator(
  (netG1): Encoder(
    (model): Sequential(
      (encoder): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    )
  )
  (netG2): Encoder(
    (model): Sequential(
      (encoder): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG3): Encoder(
    (model): Sequential(
      (encoder): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG4): Encoder(
    (model): Sequential(
      (encoder): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG5): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG6): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG7): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (netD1): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD2): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD3): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD4): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD5): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD6): Decoder(
    (model): Sequential(
      (decoder): Conv2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD7): Decoder(
    (model): Sequential(
      (decoder): Conv2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
)
2024-03-10 17:23:53,940 - root - INFO - Generator(
  (netG1): Encoder(
    (model): Sequential(
      (encoder): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    )
  )
  (netG2): Encoder(
    (model): Sequential(
      (encoder): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG3): Encoder(
    (model): Sequential(
      (encoder): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG4): Encoder(
    (model): Sequential(
      (encoder): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG5): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG6): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG7): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (netD1): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD2): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD3): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD4): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD5): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD6): Decoder(
    (model): Sequential(
      (decoder): Conv2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD7): Decoder(
    (model): Sequential(
      (decoder): Conv2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
)
2024-03-10 17:25:18,981 - root - INFO - Generator(
  (netG1): Encoder(
    (model): Sequential(
      (encoder): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    )
  )
  (netG2): Encoder(
    (model): Sequential(
      (encoder): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG3): Encoder(
    (model): Sequential(
      (encoder): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG4): Encoder(
    (model): Sequential(
      (encoder): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG5): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG6): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG7): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (netD1): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD2): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD3): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD4): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD5): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD6): Decoder(
    (model): Sequential(
      (decoder): Conv2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD7): Decoder(
    (model): Sequential(
      (decoder): Conv2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
)
2024-03-10 17:26:23,611 - root - INFO - Generator(
  (netG1): Encoder(
    (model): Sequential(
      (encoder): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    )
  )
  (netG2): Encoder(
    (model): Sequential(
      (encoder): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG3): Encoder(
    (model): Sequential(
      (encoder): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG4): Encoder(
    (model): Sequential(
      (encoder): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG5): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG6): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG7): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (netD1): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD2): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD3): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD4): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD5): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD6): Decoder(
    (model): Sequential(
      (decoder): Conv2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD7): Decoder(
    (model): Sequential(
      (decoder): Conv2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
)
2024-03-10 17:28:13,183 - root - INFO - Generator(
  (net1): Encoder(
    (model): Sequential(
      (encoder): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (net2): Encoder(
    (model): Sequential(
      (encoder): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net3): Encoder(
    (model): Sequential(
      (encoder): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net4): Encoder(
    (model): Sequential(
      (encoder): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net5): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net6): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net7): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (de1): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
  (de2): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de3): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de4): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de5): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de6): Decoder(
    (model): Sequential(
      (decoder): Conv2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de7): Decoder(
    (model): Sequential(
      (decoder): Conv2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
)
2024-03-10 17:28:34,634 - root - INFO - Generator(
  (net1): Encoder(
    (model): Sequential(
      (encoder): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (net2): Encoder(
    (model): Sequential(
      (encoder): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net3): Encoder(
    (model): Sequential(
      (encoder): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net4): Encoder(
    (model): Sequential(
      (encoder): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net5): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net6): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net7): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (de1): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
  (de2): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de3): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de4): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de5): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de6): Decoder(
    (model): Sequential(
      (decoder): Conv2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de7): Decoder(
    (model): Sequential(
      (decoder): Conv2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
)
2024-03-10 17:29:07,054 - root - INFO - Generator(
  (net1): Encoder(
    (model): Sequential(
      (encoder): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (net2): Encoder(
    (model): Sequential(
      (encoder): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net3): Encoder(
    (model): Sequential(
      (encoder): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net4): Encoder(
    (model): Sequential(
      (encoder): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net5): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net6): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net7): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (de1): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
  (de2): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de3): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de4): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de5): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de6): Decoder(
    (model): Sequential(
      (decoder): Conv2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de7): Decoder(
    (model): Sequential(
      (decoder): Conv2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
)
2024-03-10 17:29:55,667 - root - INFO - Generator(
  (net1): Encoder(
    (model): Sequential(
      (encoder): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (net2): Encoder(
    (model): Sequential(
      (encoder): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net3): Encoder(
    (model): Sequential(
      (encoder): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net4): Encoder(
    (model): Sequential(
      (encoder): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net5): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net6): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net7): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (de1): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
  (de2): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de3): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de4): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de5): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de6): Decoder(
    (model): Sequential(
      (decoder): Conv2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de7): Decoder(
    (model): Sequential(
      (decoder): Conv2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
)
2024-03-10 17:30:23,198 - root - INFO - Generator(
  (net1): Encoder(
    (model): Sequential(
      (encoder): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (net2): Encoder(
    (model): Sequential(
      (encoder): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net3): Encoder(
    (model): Sequential(
      (encoder): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net4): Encoder(
    (model): Sequential(
      (encoder): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net5): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net6): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net7): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (de1): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
  (de2): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de3): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de4): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de5): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de6): Decoder(
    (model): Sequential(
      (decoder): Conv2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de7): Decoder(
    (model): Sequential(
      (decoder): Conv2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
)
2024-03-10 17:30:35,532 - root - INFO - Generator(
  (net1): Encoder(
    (model): Sequential(
      (encoder): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (net2): Encoder(
    (model): Sequential(
      (encoder): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net3): Encoder(
    (model): Sequential(
      (encoder): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net4): Encoder(
    (model): Sequential(
      (encoder): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net5): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net6): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net7): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (de1): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
  (de2): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de3): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de4): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de5): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de6): Decoder(
    (model): Sequential(
      (decoder): Conv2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de7): Decoder(
    (model): Sequential(
      (decoder): Conv2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
)
2024-03-10 17:32:13,909 - root - INFO - Generator(
  (net1): Encoder(
    (model): Sequential(
      (encoder): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (net2): Encoder(
    (model): Sequential(
      (encoder): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net3): Encoder(
    (model): Sequential(
      (encoder): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net4): Encoder(
    (model): Sequential(
      (encoder): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net5): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net6): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net7): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (de1): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de2): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de3): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de4): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de5): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de6): Decoder(
    (model): Sequential(
      (decoder): Conv2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de7): Decoder(
    (model): Sequential(
      (decoder): Conv2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
)
2024-03-10 17:52:58,593 - root - INFO - Generator(
  (net1): Encoder(
    (model): Sequential(
      (encoder): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (net2): Encoder(
    (model): Sequential(
      (encoder): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net3): Encoder(
    (model): Sequential(
      (encoder): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net4): Encoder(
    (model): Sequential(
      (encoder): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net5): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net6): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (net7): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (de1): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de2): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de3): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de4): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de5): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de6): Decoder(
    (model): Sequential(
      (decoder): Conv2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (de7): Decoder(
    (model): Sequential(
      (decoder): Conv2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
)
