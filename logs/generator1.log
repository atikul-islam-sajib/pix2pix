2024-03-10 17:11:44,498 - root - INFO - Generator(
  (netG1): Encoder(
    (model): Sequential(
      (encoder): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    )
  )
  (netG2): Encoder(
    (model): Sequential(
      (encoder): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG3): Encoder(
    (model): Sequential(
      (encoder): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG4): Encoder(
    (model): Sequential(
      (encoder): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG5): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG6): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netG7): Encoder(
    (model): Sequential(
      (encoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (leakyReLU): LeakyReLU(negative_slope=0.2, inplace=True)
    )
  )
  (netD1): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD2): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD3): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD4): Decoder(
    (model): Sequential(
      (decoder): Conv2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD5): Decoder(
    (model): Sequential(
      (decoder): Conv2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD6): Decoder(
    (model): Sequential(
      (decoder): Conv2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
      (batch_norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (netD7): Decoder(
    (model): Sequential(
      (decoder): Conv2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (ReLU): ReLU(inplace=True)
    )
  )
)
